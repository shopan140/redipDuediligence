dfDueDiligence <- df[, names(dueDiligenceColumn)]
xlColNames <- c("Request #",
"Project name",
"Project description",
"Request amount",
"Organization name",
"City",
"Organization Type",
"Risk Level (Low, Medium, High)",
"Project Value (Low, Medium, High)",
"Other funding sources",
"Notes or additional info",
"Recommendation (Approve/Deny)",
"Feedbck from")
dueDiligenceColumn <-  c("Request #" = "projectNumber",
"Risk Level (Low, Medium, High)" = "riskLevel",
"Project Value (Low, Medium, High)" = "valueLevel",
"Other funding sources" = "otherFundingSources",
"Notes or additional info" = "additionalInfo",
"Recommendation (Approve/Deny)" = "recommendation",
"Feedbck from" = "feedbackBy")
dfDueDiligence <- df[, names(dueDiligenceColumn)]
xlColNames <- c("Request #",
"Project name",
"Project description",
"Request amount",
"Organization name",
"City",
"Organization Type",
"Risk Level (Low, Medium, High)",
"Project Value (Low, Medium, High)",
"Other funding sources",
"Notes or additional info",
"Recommendation (Approve/Deny)",
"Feedback from")
dueDiligenceColumn <-  c("Request #" = "projectNumber",
"Risk Level (Low, Medium, High)" = "riskLevel",
"Project Value (Low, Medium, High)" = "valueLevel",
"Other funding sources" = "otherFundingSources",
"Notes or additional info" = "additionalInfo",
"Recommendation (Approve/Deny)" = "recommendation",
"Feedback from" = "feedbackBy")
dfDueDiligence <- df[, names(dueDiligenceColumn)]
View(dfDueDiligence)
nameOfClass(dfDueDiligence) <- dueDiligenceColumn
names(dfDueDiligence) <- dueDiligenceColumn
View(dfDueDiligence)
dueDiligenceColumn <-  c(projectNumber = "Request #",
riskLevel = "Risk Level (Low, Medium, High)",
valueLevel = "Project Value (Low, Medium, High)",
otherFundingSources = "Other funding sources",
additionalInfo = "Notes or additional info",
recommendation = "Recommendation (Approve/Deny)",
feedbackBy = "Feedback from")
dfDueDiligence <- df[, dueDiligenceColumn]
projectId <- "2022110130"
rm(projectNumber)
dueDiligenceColumn <-  c(projectNumber = "Request #",
riskLevel = "Risk Level (Low, Medium, High)",
valueLevel = "Project Value (Low, Medium, High)",
otherFundingSources = "Other funding sources",
additionalInfo = "Notes or additional info",
recommendation = "Recommendation (Approve/Deny)",
feedbackBy = "Feedback from")
dfDueDiligence <- df[, dueDiligenceColumn]
df <- readxl::read_xlsx("data//Due Diligence Feedback.xlsx",
sheet = "Sheet1")
xlColNames <- c("Request #",
"Project name",
"Project description",
"Request amount",
"Organization name",
"City",
"Organization Type",
"Risk Level (Low, Medium, High)",
"Project Value (Low, Medium, High)",
"Other funding sources",
"Notes or additional info",
"Recommendation (Approve/Deny)",
"Feedback from")
projectNumber = "Request #"
riskLevel = "Risk Level (Low, Medium, High)"
valueLevel = "Project Value (Low, Medium, High)"
otherFundingSources = "Other funding sources"
additionalInfo = "Notes or additional info"
recommendation = "Recommendation (Approve/Deny)"
feedbackBy = "Feedback from"
projectId <- "2022110130"
temp <- df[df[projectNumber] == projectId, ]
View(temp)
df <- df[!is.na(df[projectNumber]), ]
temp <- df[df[projectNumber] == projectId, ]
View(temp)
temp1 = temp[1,]
View(temp1)
temp1 = temp[1, , drop = FALSE]
temp1[otherFundingSources]
cat(temp1[otherFundingSources])
paste0(temp1[otherFundingSources])
paste0(temp1[[otherFundingSources]])
paste(temp1[[otherFundingSources]])
paste("Evaluator:", temp1[[feedbackBy]])
paste("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp[[valueLevel]], sepStr)
sepStr = "\n"
paste("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp[[valueLevel]], sepStr)
tt <- paste("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp[[valueLevel]], sepStr)
data.frame("Project Number" = projectId, "evaluation" = tt)
temp2 <- data.frame("Project Number" = projectId, "evaluation" = tt)
View(temp2)
tt <- cat("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp[[valueLevel]], sepStr)
tt <- cat("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp[[valueLevel]], sepStr)
tt <- paste0("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp[[valueLevel]], sepStr)
tt
temp1[[feedbackBy]]
tt <- paste0("Evaluator:", unlist(temp1[[feedbackBy]]), sepStr,
"Risk Level:", unlist(temp1[[riskLevel]]), sepStr,
"Project Value:", unlist(temp[[valueLevel]]), sepStr)
tt
tt <- paste0("Evaluator:", unlist(temp1[[feedbackBy]]),
"Risk Level:", unlist(temp1[[riskLevel]]),
"Project Value:", unlist(temp[[valueLevel]]))
tt
temp2 <- data.frame("Project Number" = projectId, "evaluation" = tt)
tt <- paste0("Evaluator:", unlist(temp1[[feedbackBy]]),
"Risk Level:", unlist(temp1[[riskLevel]]),
"Project Value:", unlist(temp1[[valueLevel]]))
tt
temp2 <- data.frame("Project Number" = projectId, "evaluation" = tt)
tt <- paste0("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp1[[valueLevel]])
temp2 <- data.frame("Project Number" = projectId, "evaluation" = tt)
tt
tt <- paste("Evaluator:", temp1[[feedbackBy]], sepStr,
"Risk Level:", temp1[[riskLevel]], sepStr,
"Project Value:", temp1[[valueLevel]])
tt
temp2 <- data.frame("Project Number" = projectId, "evaluation" = tt)
writexl::write_xlsx(temp2, path = "data/trial.xlsx")
eval <- temp1[1, feedbackBy]
eval <- temp1[1, feedbackBy, drop = TRUE]
eval <- temp1[1, feedbackBy, drop = TRUE]
temp1
feedbackBy
baseString <- paste0("Evaluator: ", "<evaluator>", sepStr,
"Risk Level: ", "<risk>", sepStr,
"Project Value: ", "<projectVal>", sepStr,
"Other funding sources", "<otherSources>", sepStr,
"Notes: ", "<notes>", sepStr,
"Recommendation", "<recomm>", sepStr)
newString <- baseString.replace("<evaluator>", eval)
newString <- gsub("<evaluator>", eval, baseString)
newString
baseString <- gsub("<evaluator>", eval, baseString)
baseString <- gsub("<evaluator>", eval, baseString)
baseString
baseString <- gsub("<evaluator>", eval, baseString)
baseString
baseString <- gsub("<risk>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString
baseString <- gsub("<risk>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString <- gsub("<evaluator>", temp1[1, feedbackBy, drop = TRUE], baseString)
baseString <- gsub("<risk>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString <- gsub("<projectVal>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString <- gsub("<otherSources>", temp1[1, otherFundingSources, drop = TRUE], baseString)
baseString <- gsub("<notes>", temp1[1, additionalInfo, drop = TRUE], baseString)
baseString <- gsub("<recomm>", temp1[1, recommendation, drop = TRUE], baseString)
baseString
baseString <- paste0("Evaluator: ", "<evaluator>", sepStr,
"Risk Level: ", "<risk>", sepStr,
"Project Value: ", "<projectVal>", sepStr,
"Other funding sources", "<otherSources>", sepStr,
"Notes: ", "<notes>", sepStr,
"Recommendation", "<recomm>", sepStr)
baseString <- gsub("<evaluator>", temp1[1, feedbackBy, drop = TRUE], baseString)
baseString <- gsub("<risk>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString <- gsub("<projectVal>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString <- gsub("<otherSources>", temp1[1, otherFundingSources, drop = TRUE], baseString)
baseString <- gsub("<notes>", temp1[1, additionalInfo, drop = TRUE], baseString)
baseString <- gsub("<recomm>", temp1[1, recommendation, drop = TRUE], baseString)
baseString
baseString <- paste0("Evaluator: ", "<evaluator>", sepStr,
"Risk Level: ", "<risk>", sepStr,
"Project Value: ", "<projectVal>", sepStr,
"Other funding sources", "<otherSources>", sepStr,
"Notes: ", "<notes>", sepStr,
"Recommendation", "<recomm>", sepStr)
baseString <- gsub("<evaluator>", temp1[1, feedbackBy, drop = TRUE], baseString)
baseString
baseString <- gsub("<risk>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString
baseString <- gsub("<projectVal>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString
baseString <- gsub("<otherSources>", temp1[1, otherFundingSources, drop = TRUE], baseString)
baseString
temp1[1, otherFundingSources, drop = TRUE]
View(temp1)
View(df)
# Replace NAs with "NA" using replace
df_filled <- as.data.frame(lapply(df, function(x) replace(x, is.na(x), "N/A")))
View(df_filled)
# Replace NAs with "NA" using replace
df <- as.data.frame(lapply(df, function(x) replace(x, is.na(x), "N/A")))
temp <- df[df[projectNumber] == projectId, , drop = FALSE]
temp1 = temp[1, , drop = FALSE]
baseString <- paste0("Evaluator: ", "<evaluator>", sepStr,
"Risk Level: ", "<risk>", sepStr,
"Project Value: ", "<projectVal>", sepStr,
"Other funding sources", "<otherSources>", sepStr,
"Notes: ", "<notes>", sepStr,
"Recommendation", "<recomm>", sepStr)
baseString <- gsub("<evaluator>", temp1[1, feedbackBy, drop = TRUE], baseString)
baseString
baseString <- gsub("<risk>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString
baseString <- gsub("<projectVal>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString
baseString <- gsub("<otherSources>", temp1[1, otherFundingSources, drop = TRUE], baseString)
baseString
temp1 = temp[1, , drop = FALSE]
baseString <- paste0("Evaluator: ", "<evaluator>", sepStr,
"Risk Level: ", "<risk>", sepStr,
"Project Value: ", "<projectVal>", sepStr,
"Other funding sources", "<otherSources>", sepStr,
"Notes: ", "<notes>", sepStr,
"Recommendation", "<recomm>", sepStr)
baseString <- gsub("<evaluator>", temp1[1, feedbackBy, drop = TRUE], baseString)
baseString
baseString <- gsub("<risk>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString
baseString <- gsub("<projectVal>", temp1[1, riskLevel, drop = TRUE], baseString)
baseString
baseString <- gsub("<otherSources>", temp1[1, otherFundingSources, drop = TRUE], baseString)
baseString
baseString <- gsub("<notes>", temp1[1, additionalInfo, drop = TRUE], baseString)
temp <- df[df[projectNumber] == projectId, , drop = FALSE]
temp1 = temp[1, , drop = FALSE]
baseString <- paste0("Evaluator: ", "<evaluator>", sepStr,
"Risk Level: ", "<risk>", sepStr,
"Project Value: ", "<projectVal>", sepStr,
"Other funding sources", "<otherSources>", sepStr,
"Notes: ", "<notes>", sepStr,
"Recommendation", "<recomm>", sepStr)
View(temp1)
df <- readxl::read_xlsx("data//Due Diligence Feedback.xlsx",
sheet = "Sheet1")
df <- df[!is.na(df[projectNumber]), , drop = FALSE]
# Replace NAs with "NA" using replace
df <- as.data.frame(lapply(df, function(x) replace(x, is.na(x), "N/A")))
temp <- df[df[projectNumber] == projectId, , drop = FALSE]
temp1 = temp[1, , drop = FALSE]
View(temp1)
View(temp)
View(df)
temp <- df[df[projectNumber] == projectId, , drop = FALSE]
projectNumber
df <- readxl::read_xlsx("data//Due Diligence Feedback.xlsx",
sheet = "Sheet1")
View(df)
df <- df[!is.na(df[projectNumber]), , drop = FALSE]
# Replace NAs with "NA" using replace
df <- as.data.frame(lapply(df, function(x) replace(x, is.na(x), "N/A")))
View(df)
df <- readxl::read_xlsx("data//Due Diligence Feedback.xlsx",
sheet = "Sheet1")
df <- df[!is.na(df[projectNumber]), , drop = FALSE]
temp <- df[df[projectNumber] == projectId, , drop = FALSE]
fillna
?fillna
??fillna
library(devtools)
load_all()
replaceString(temp1, feedbackBy, "<evaluator>", baseString )
replaceString(temp1, otherFundingSources, ""<otherSources>"", baseString)
replaceString(temp1, otherFundingSources, "<otherSources>", baseString)
load_all()
replaceString(temp1, otherFundingSources, "<otherSources>", baseString)
load_all()
makeEvaluationStr(temp1)
debug(makeEvaluationStr)
makeEvaluationStr(temp1)
baseString
load_all()
makeEvaluationStr(temp1)
debug()
debug(makeEvaluationStr)
makeEvaluationStr(temp1)
load_all()
makeEvaluationStr(temp1)
loadings()
load_all()
complieSingleProject(temp)
load_all()
View(temp)
tt <- complieDataFrame(df)
load_all()
tt <- complieDataFrame(df)
load_all()
tt <- complieDataFrame(df)
load_all()
tt <- complieDataFrame(df)
View(tt)
tt[["Request tt"]]
tt[["Request tt"]]
debug(complieDataFrame)
tt <- complieDataFrame(df)
View(projectList)
load_all()
debug(complieDataFrame)
tt <- complieDataFrame(df)
View(tt)
tt[[1]]
load_all()
debug(complieDataFrame)
tt <- complieDataFrame(df)
View(tt)
rbind(tt)
temp4 <- complieSingleProject(projectId, temp)
View(temp4)
load_all()
temp4 <- complieSingleProject(projectId, temp)
View(temp4)
View(temp4)
writexl::write_xlsx(temp4, "temp.xlsx")
View(df)
df <- readxl::read_xlsx("data//Due Diligence Feedback.xlsx",
sheet = "Sheet1")
df <- df[!is.na(df[projectNumber]), , drop = FALSE]
temp <- df[df[projectNumber] == projectId, , drop = FALSE]
temp1 = temp[1, , drop = FALSE]
makeEvaluationStr(temp1)
temp1
debug(makeEvaluationStr)
makeEvaluationStr(temp1)
feedbackBy
riskLevel
valueLevel
replaceString(temp1, riskLevel, "<risk>")
replaceString(temp1, otherFundingSources, "<otherSources>")
complieSingleProject(projectId, df)
load_all()
complieSingleProject(projectId, df)
complieSingleProject(projectId, df)
debug(complieSingleProject)
complieSingleProject(projectId, df)
load_all()
debug(complieSingleProject)
complieSingleProject(projectId, df)
View(df)
load_all()
debug(complieSingleProject)
complieSingleProject(projectId, df)
df[i, , drop = FALSE])
df[i, , drop = FALSE]
load_all()
debug(complieSingleProject)
complieSingleProject(projectId, df)
debug(makeEvaluationStr)
mekeEvaluationStr(temp1)
debug(makeEvaluationStr)
makeEvaluationStr(temp1)
load_all()
debug(makeEvaluationStr)
makeEvaluationStr(temp1)
load_all()
tt <- complieDataFrame(df)
View(tt)
library(dyplr)
library(dpylr)
library(dplyr)
bind_rows(tt)
kk <- bind_rows(tt)
View(kk)
writexl::write_xlsx(kk, path = "data//trial.xlsx")
load_all)()
library(devtools)
load_all()
load_all()
df <- readxl::read_xlsx("data//Due Diligence Feedback.xlsx",
sheet = "Sheet1")
df <- df[!is.na(df[projectNumber]), , drop = FALSE]
tt <- complieDataFrame(df)
tt <- bind_rows(tt)
writexl::write_xlsx(tt, path = "data//trial.xlsx")
readxl::read_xlsx("data//REDIP Intake 2 - Due Diligence - AGRI.xlsx")
df <- readxl::read_xlsx("data//REDIP Intake 2 - Due Diligence - AGRI.xlsx")
View(df)
?read_xlsx
df <- readxl::read_xlsx("data//REDIP Intake 2 - Due Diligence - AGRI.xlsx", skip = 1)
View(df)
df[, c(projectNumber, riskLevel, valueLevel, otherFundingSources, additionalInfo)]
df[, c(projectNumber, riskLevel, valueLevel, otherFundingSources, additionalInfo, recommendation)]
load_all()
readDueDiligenceExcel("data//REDIP Intake 2 - Due Diligence - AGRI.xlsx", reviewer = "AGRI")
dd <- readDueDiligenceExcel("data//REDIP Intake 2 - Due Diligence - AGRI.xlsx", reviewer = "AGRI")
View(dd)
dueDiligenceFiles <- c("AGRI",
"CITZ",
"Education",
"EMBC",
"EMLI",
"ENV (CLEAN BC)",
"ENV (Parks)",
"ENV (RSTBC",
"Forests",
"Housing",
"JEDI (Major Investments)",
"JEDI (Manufacturing)",
"JEDI (MJF)",
"JEDI (PNP Program)",
"JEDI (REIP)",
"JEDI (Small Business)",
"MIRR",
"MOTI",
"MUNI",
"PSFS",
"PSSG",
"TACS (Arts & Culture)",
"TACS (Heritage)",
"TACS (Mountain Resort)",
"TACS (Sport)",
"TACS (Tourism)",
"WLRS")
load_all()
makefileName()
load_all()
makefileName()
files <- makefileName()
files
df <- readDueDiligenceExcel(files[[15]], dueDiligenceFiles[[15]])
View(df)
Map(readDueDiligenceExcel, files, dueDiligenceFiles)
Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
View(dd)
df <- bind_rows(dd)
View(df)
load_all()
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
View(dd)
debug(readDueDiligenceExcel)
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
load_all()
debug(readDueDiligenceExcel)
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
debug(readDueDiligenceExcel)
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
debug(readDueDiligenceExcel)
dd <- Map(readDueDiligenceExcel, files, dueDiligenceFiles)
View(dd)
load_all()
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
View(dd)
load_all()
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
View(dd)
View(dd)
dd[["data//REDIP Intake 2 - Due Diligence - CITZ.xlsx"]]
str(dd[["data//REDIP Intake 2 - Due Diligence - CITZ.xlsx"]])
is.data.frame(dd[["data//REDIP Intake 2 - Due Diligence - CITZ.xlsx"]]))
is.data.frame(dd[["data//REDIP Intake 2 - Due Diligence - CITZ.xlsx"]])
is.data.frame(dd[["data//REDIP Intake 2 - Due Diligence - AGRI.xlsx"]])
load_all()
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
View(dd)
load_all()
dd <- Map(function(x , y) try(readDueDiligenceExcel(x,y)), files, dueDiligenceFiles)
View(dd)
lapply(files, files.exits)
lapply(files, files.exists)
lapply(files, file.exists)
unlist(lapply(files, file.exists))
files[unlist(lapply(files, file.exists))]
load_all()
compileDueDiligence()
load_all()
compileDueDiligence()
lapply(files, print)
lapply(files, function(x) print("File not exist: ", x))
lapply(files, function(x) cat("File not exist: ", x))
lapply(files, function(x) print(x))
unlist(lapply(files, function(x) print(x)))
load_all()
df <- compileDueDiligence()
View(df)
load_all()
df <- compileDueDiligence(outputFile = "data//output.xlsx")
load_all()
df <- compileDueDiligence(outputFile = "data//output.xlsx")
load_all()
df <- compileDueDiligence(outputFile = "data//output.xlsx")
load_all()
df <- compileDueDiligence(outputFile = "data//output.xlsx")
?print
load_all()
df <- compileDueDiligence(outputFile = "data//output.xlsx")
load_all()
df <- compileDueDiligence(outputFile = "data//output.xlsx")
load_all()
df <- compileDueDiligence(outputFile = "data//output.xlsx")
